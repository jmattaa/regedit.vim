*regedit.txt*			      Easily acess and edit the vim registers

==============================================================================
Table of Contents					     *regedit.toc*

1. Usage                                                   |regedit.usage|
2. Registers					       |regedit.registers|
3. Mappings						|regedit.mappings|
  3.1 Customize mappings		      |regedit.mappings.customize|
4. Authors                                               |regedit.authors|


==============================================================================
1. Usage                                                   *regedit.usage*

Use quickmark by typing `:Regedit open<cr>` this will open a buffer with all of
your editable registers

To edit a specific register you can skip listing all the registers and
searching through by typing `:Regedit <register>` for example `:Regedit "` to
edit the `"` register and `Regedit c` to edit the `c` register. To see all
<regeister> options check |regedit.registers|


==============================================================================
2. Registers					        *regedit.registers*

To run the `Regedit` command with a registe ruse without the `"`

The avalible registers that you can acess are:
  - `""`
  - `"a`
  - `"b`
  - `"c`
  - `"d`
  - `"e`
  - `"f`
  - `"g`
  - `"h`
  - `"i`
  - `"j`
  - `"k`
  - `"l`
  - `"m`
  - `"n`
  - `"o`
  - `"p`
  - `"q`
  - `"r`
  - `"s`
  - `"t`
  - `"u`
  - `"v`
  - `"w`
  - `"x`
  - `"y`
  - `"z`
  - `"0`
  - `"1`
  - `"2`
  - `"3`
  - `"4`
  - `"5`
  - `"6`
  - `"7`
  - `"8`
  - `"9`
  - `"+`

==============================================================================
3. Mappings						*regedit.mappings*

There is one main key in the `regedit` default mappings that is the regedit
prefix key. By default this is `<leader>r` which means to edit a certain
register you can use `<prefix><register>` to edit your register.

There is also another key which is important for regedit and it is the
`Regedit.KeyOpen` this is the key after the `prefix` which will tell regedit
to open a buffer by default you can use `<prefix>-` this will open the buffer

The keys that you can customize are:
    `Regedi.KeyPrefix`: The prefix key
    `Regedit.KeyOpen`: The key used to open the regedit buffer
    `Regedit.KeyClear`: The key used to clear all of the registers

Default keys:
    `KeyPrefix`: <leader>`r`
    `KeyOpen`: `-`
    `KeyClear`: `!`

To customize these see |regedit.mappings.customize|

==============================================================================
3.1 Customize Mappings	    		       *regedit.mappings.customize*

To customize the prefix and open keys you can use a snippet that looks like this:
>vim
    " unset the default mappings 
    call RegeditMappings.UnsetMappings()

    " set prefix key 
    let Regedit.KeyPrefix = '<leader>v'
    " set the key to open the buffer
    " if this is a register it will be overriden
    let Regedit.KeyOpen = '%'
    let Regedit.KeyClear = '-'

    " set our mappings
    call RegeditMappings.SetMappings()
<
Place this in your `after` folder. In vim you can place it in
`.vim/after/plugin/regedit.vim`
In neovim you can place it in `.nvim/after/plugin/regedit.vim`
Don't worry no need to use lua ;>

The keys that you can customize are:
    `Regedi.KeyPrefix`: The prefix key
    `Regedit.KeyOpen`: The key used to open the regedit buffer
    `Regedit.KeyClear`: The key used to clear all of the registers

==============================================================================
4. Authors                                               *regedit.authors*

- @jmattaa <https://github.com/jmattaa>

vim:tw=78:ts=8:noet:ft=help:norl:
